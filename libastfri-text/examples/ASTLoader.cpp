#include <libastfri/inc/StmtFactory.hpp>
#include <libastfri/inc/ExprFactory.hpp>
#include <libastfri/inc/TypeFactory.hpp>

namespace my_ast_trees
{
    template <typename TreeVisitor>
    void load_ast_tree_1(TreeVisitor& tv) {
        //Example of creating output from "stack.h"
        using namespace astfri;
        StmtFactory& sfc = StmtFactory::get_instance();
        ExprFactory& efc = ExprFactory::get_instance();
        TypeFactory& tfc = TypeFactory::get_instance();
        TranslationUnit* tu = std::move(sfc.mk_translation_unit());
        //---------------------------------------------------------
        InterfaceDefStmt* idsStack = std::move(sfc.mk_interface_def("Stack"));
        idsStack->tparams_ = {std::move(sfc.mk_generic_param("", "T"))};
        idsStack->bases_ = {std::move(sfc.mk_interface_def("ADT"))};
        idsStack->methods_ = {
            std::move(sfc.mk_method_def(
                {},
                std::move(sfc.mk_function_def(
                    "push",
                    {
                        std::move(sfc.mk_param_var_def(
                            "element",
                            std::move(tfc.mk_user("T")),
                            {}
                        ))
                    },
                    std::move(tfc.mk_void()),
                    {}
                )),
                std::move(AccessModifier::Public),
                std::move(Virtuality::Virtual)
            )),
            std::move(sfc.mk_method_def(
                {},
                std::move(sfc.mk_function_def(
                    "peek",
                    {},
                    std::move(tfc.mk_indirect(std::move(tfc.mk_user("T")))),
                    {}
                )),
                std::move(AccessModifier::Public),
                std::move(Virtuality::Virtual)
            )),
            std::move(sfc.mk_method_def(
                {},
                std::move(sfc.mk_function_def(
                    "pop",
                    {},
                    std::move(tfc.mk_user("T")),
                    {}
                )),
                std::move(AccessModifier::Public),
                std::move(Virtuality::Virtual)
            ))
        };
        //------------------------------------------------
        ClassDefStmt* cdsImplStack = std::move(sfc.mk_class_def("ImplicitStack"));
        cdsImplStack->tparams_ = {std::move(sfc.mk_generic_param("", "T"))};
        cdsImplStack->interfaces_.push_back(idsStack);
        ClassDefStmt* ext = std::move(sfc.mk_class_def("ADS"));
        ext->tparams_ = {
            std::move(sfc.mk_generic_param("", "T"))
        };
        cdsImplStack->bases_.push_back(std::move(ext));
        cdsImplStack->constructors_ = {
            std::move(sfc.mk_constructor_def(
                cdsImplStack,
                {},
                {
                    std::move(sfc.mak_base_initializer(
                        "ADS<T>",
                        {
                            std::move(efc.mk_new(std::move(efc.mk_constructor_call(
                                std::move(tfc.mk_user("amt::IS<T>")),
                                {}
                            ))))
                        }
                    ))
                },
                {},
                std::move(AccessModifier::Public)
            )),
            std::move(sfc.mk_constructor_def(
                cdsImplStack,
                {
                    std::move(sfc.mk_param_var_def(
                        "other",
                        std::move(tfc.mk_indirect(std::move(tfc.mk_user("ImplicitStack")))),
                        {}
                    ))
                },
                {
                    std::move(sfc.mak_base_initializer(
                        "ADS<T>",
                        {
                            std::move(efc.mk_new(std::move(efc.mk_constructor_call(
                                std::move(tfc.mk_user("amt::IS<T>")),
                                {}
                            )))),
                            efc.mk_param_var_ref("other")
                        }
                    ))
                },
                {},
                std::move(AccessModifier::Public)
            ))
        };
        cdsImplStack->methods_ = {
            std::move(sfc.mk_method_def(
                cdsImplStack,
                std::move(sfc.mk_function_def(
                    "push",
                    {
                        std::move(sfc.mk_param_var_def(
                            "element",
                            std::move(tfc.mk_user("T")),
                            {}
                        ))
                    },
                    std::move(tfc.mk_void()),
                    std::move(sfc.mk_compound({
                        std::move(sfc.mk_expr(std::move(efc.mk_bin_on(
                            std::move(efc.mk_member_var_ref(
                                std::move(efc.mk_method_call(
                                    std::move(efc.mk_method_call(
                                        std::move(efc.mk_this()),
                                        "getSequence",
                                        {}
                                    )),
                                    "insertLast",
                                    {}
                                )),
                                "data_"
                            )),
                            std::move(BinOpType::Assign),
                            std::move(efc.mk_param_var_ref("element"))
                        ))))
                    }))
                )),
                std::move(AccessModifier::Public),
                std::move(Virtuality::Virtual)
            )),
            std::move(sfc.mk_method_def(
                cdsImplStack,
                std::move(sfc.mk_function_def(
                    "peek",
                    {},
                    std::move(tfc.mk_indirect(std::move(tfc.mk_user("T")))),
                    std::move(sfc.mk_compound({
                        std::move(sfc.mk_if(
                            std::move(efc.mk_method_call(
                                std::move(efc.mk_this()),
                                "isEmpty",
                                {}
                            )),
                            std::move(sfc.mk_throw(std::move(efc.mk_function_call(
                                "out_of_range",
                                {
                                    std::move(efc.mk_string_literal("Stack is empty!"))
                                }
                            )))),
                            {}
                        )),
                        std::move(sfc.mk_return(std::move(efc.mk_member_var_ref(
                            std::move(efc.mk_method_call(
                                std::move(efc.mk_method_call(
                                    std::move(efc.mk_this()),
                                    "getSequence",
                                    {}
                                )),
                                "accessLast",
                                {}
                            )),
                            "data_"
                        ))))
                    }))
                )),
                std::move(AccessModifier::Public),
                std::move(Virtuality::Virtual)
            )),
            std::move(sfc.mk_method_def(
                cdsImplStack,
                std::move(sfc.mk_function_def(
                    "pop",
                    {},
                    std::move(tfc.mk_user("T")),
                    std::move(sfc.mk_compound({
                        std::move(sfc.mk_if(
                            std::move(efc.mk_method_call(
                                std::move(efc.mk_this()),
                                "isEmpty",
                                {}
                            )),
                            std::move(sfc.mk_throw(std::move(efc.mk_function_call(
                                "out_of_range",
                                {
                                    std::move(efc.mk_string_literal("Stack is empty!"))
                                }
                            )))),
                            {}
                        )),
                        std::move(sfc.mk_local_var_def(
                            "result",
                            std::move(tfc.mk_user("T")),
                            std::move(efc.mk_member_var_ref(
                                std::move(efc.mk_method_call(
                                    std::move(efc.mk_method_call(
                                        std::move(efc.mk_this()),
                                        "getSequence",
                                        {}
                                    )),
                                    "accessLast",
                                    {}
                                )),
                                "data_"
                            ))
                        )),
                        std::move(sfc.mk_expr(std::move(efc.mk_method_call(
                            std::move(efc.mk_method_call(
                                std::move(efc.mk_this()),
                                "getSequence",
                                {}
                            )),
                            "removeLast",
                            {}
                        )))),
                        std::move(sfc.mk_return(std::move(efc.mk_local_var_ref("result"))))
                    }))
                )),
                std::move(AccessModifier::Public),
                std::move(Virtuality::Virtual)
            )),
            std::move(sfc.mk_method_def(
                cdsImplStack,
                std::move(sfc.mk_function_def(
                    "getSequence",
                    {},
                    std::move(tfc.mk_indirect(std::move(tfc.mk_user("amt::IS<T>")))),
                    std::move(sfc.mk_compound({
                        std::move(sfc.mk_return(std::move(efc.mk_unknown())))
                    }))
                )),
                std::move(AccessModifier::Private),
                std::move(Virtuality::NotVirtual)
            ))
        };
        //---------------------------------------------------
        ClassDefStmt* cdsExplStack = std::move(sfc.mk_class_def("ExplicitStack"));
        cdsExplStack->tparams_ = {std::move(sfc.mk_generic_param("", "T"))};
        cdsExplStack->interfaces_.push_back(idsStack);
        ClassDefStmt* ext2 = std::move(sfc.mk_class_def("ADS"));
        ext2->tparams_ = {
            std::move(sfc.mk_generic_param("", "T"))
        };
        cdsExplStack->bases_.push_back(std::move(ext2));
        cdsExplStack->constructors_ = {
            std::move(sfc.mk_constructor_def(
                cdsExplStack,
                {},
                {
                    std::move(sfc.mak_base_initializer(
                        "ADS<T>",
                        {
                            std::move(efc.mk_new(std::move(efc.mk_constructor_call(
                                std::move(tfc.mk_user("amt::SinglyLS<T>")),
                                {}
                            ))))
                        }
                    ))
                },
                {},
                std::move(AccessModifier::Public)
            )),
            std::move(sfc.mk_constructor_def(
                cdsExplStack,
                {
                    std::move(sfc.mk_param_var_def(
                        "other",
                        std::move(tfc.mk_indirect(std::move(tfc.mk_user("ExplicitStack")))),
                        {}
                    ))
                },
                {
                    std::move(sfc.mak_base_initializer(
                        "ADS<T>",
                        {
                            std::move(efc.mk_new(std::move(efc.mk_constructor_call(
                                std::move(tfc.mk_user("amt::SinglyLS<T>")),
                                {}
                            )))),
                            efc.mk_param_var_ref("other")
                        }
                    ))
                },
                {},
                std::move(AccessModifier::Public)
            ))
        };
        cdsExplStack->methods_ = {
            std::move(sfc.mk_method_def(
                cdsExplStack,
                std::move(sfc.mk_function_def(
                    "push",
                    {
                        std::move(sfc.mk_param_var_def(
                            "element",
                            std::move(tfc.mk_user("T")),
                            {}
                        ))
                    },
                    std::move(tfc.mk_void()),
                    std::move(sfc.mk_compound({
                        std::move(sfc.mk_expr(std::move(efc.mk_bin_on(
                            std::move(efc.mk_member_var_ref(
                                std::move(efc.mk_method_call(
                                    std::move(efc.mk_method_call(
                                        std::move(efc.mk_this()),
                                        "getSequence",
                                        {}
                                    )),
                                    "insertFirst",
                                    {}
                                )),
                                "data_"
                            )),
                            std::move(BinOpType::Assign),
                            std::move(efc.mk_param_var_ref("element"))
                        ))))
                    }))
                )),
                std::move(AccessModifier::Public),
                std::move(Virtuality::Virtual)
            )),
            std::move(sfc.mk_method_def(
                cdsExplStack,
                std::move(sfc.mk_function_def(
                    "peek",
                    {},
                    std::move(tfc.mk_indirect(std::move(tfc.mk_user("T")))),
                    std::move(sfc.mk_compound({
                        std::move(sfc.mk_if(
                            std::move(efc.mk_method_call(
                                std::move(efc.mk_this()),
                                "isEmpty",
                                {}
                            )),
                            std::move(sfc.mk_throw(std::move(efc.mk_function_call(
                                "out_of_range",
                                {
                                    std::move(efc.mk_string_literal("Stack is empty!"))
                                }
                            )))),
                            {}
                        )),
                        std::move(sfc.mk_return(std::move(efc.mk_member_var_ref(
                            std::move(efc.mk_method_call(
                                std::move(efc.mk_method_call(
                                    std::move(efc.mk_this()),
                                    "getSequence",
                                    {}
                                )),
                                "accessFirst",
                                {}
                            )),
                            "data_"
                        ))))
                    }))
                )),
                std::move(AccessModifier::Public),
                std::move(Virtuality::Virtual)
            )),
            std::move(sfc.mk_method_def(
                cdsExplStack,
                std::move(sfc.mk_function_def(
                    "pop",
                    {},
                    std::move(tfc.mk_user("T")),
                    std::move(sfc.mk_compound({
                        std::move(sfc.mk_if(
                            std::move(efc.mk_method_call(
                                std::move(efc.mk_this()),
                                "isEmpty",
                                {}
                            )),
                            std::move(sfc.mk_throw(std::move(efc.mk_function_call(
                                "out_of_range",
                                {
                                    std::move(efc.mk_string_literal("Stack is empty!"))
                                }
                            )))),
                            {}
                        )),
                        std::move(sfc.mk_local_var_def(
                            "result",
                            std::move(tfc.mk_user("T")),
                            std::move(efc.mk_member_var_ref(
                                std::move(efc.mk_method_call(
                                    std::move(efc.mk_method_call(
                                        std::move(efc.mk_this()),
                                        "getSequence",
                                        {}
                                    )),
                                    "accessFirst",
                                    {}
                                )),
                                "data_"
                            ))
                        )),
                        std::move(sfc.mk_expr(std::move(efc.mk_method_call(
                            std::move(efc.mk_method_call(
                                std::move(efc.mk_this()),
                                "getSequence",
                                {}
                            )),
                            "removeFirst",
                            {}
                        )))),
                        std::move(sfc.mk_return(std::move(efc.mk_local_var_ref("result"))))
                    }))
                )),
                std::move(AccessModifier::Public),
                std::move(Virtuality::Virtual)
            )),
            std::move(sfc.mk_method_def(
                cdsExplStack,
                std::move(sfc.mk_function_def(
                    "getSequence",
                    {},
                    std::move(tfc.mk_indirect(std::move(tfc.mk_user("amt::SinglyLS<T>")))),
                    std::move(sfc.mk_compound({
                        std::move(sfc.mk_return(std::move(efc.mk_unknown())))
                    }))
                )),
                std::move(AccessModifier::Private),
                std::move(Virtuality::NotVirtual)
            ))
        };
        //---------------------------------------------------
        tu->interfaces_.push_back(std::move(idsStack));
        tu->classes_.push_back(std::move(cdsImplStack));
        tu->classes_.push_back(std::move(cdsExplStack));
        tv.visit(std::move(*tu));
    }
}
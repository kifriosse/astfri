TranslationUnitDecl 0x555865ff4b38 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x555865ff53a8 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x555865ff5100 '__int128'
|-TypedefDecl 0x555865ff5418 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x555865ff5120 'unsigned __int128'
|-TypedefDecl 0x555865ff5790 <<invalid sloc>> <invalid sloc> implicit __NSConstantString '__NSConstantString_tag'
| `-RecordType 0x555865ff5500 '__NSConstantString_tag'
|   `-CXXRecord 0x555865ff5470 '__NSConstantString_tag'
|-TypedefDecl 0x555865ff5838 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x555865ff57f0 'char *'
|   `-BuiltinType 0x555865ff4be0 'char'
|-TypedefDecl 0x55586603e600 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list '__va_list_tag[1]'
| `-ConstantArrayType 0x55586603e5a0 '__va_list_tag[1]' 1
|   `-RecordType 0x555865ff5920 '__va_list_tag'
|     `-CXXRecord 0x555865ff5890 '__va_list_tag'
|-NamespaceDecl 0x55586603e658 <example.cpp:2:1, line:35:1> line:2:11 jojoNamespace
| `-CXXRecordDecl 0x55586603e6c8 <line:4:5, line:33:5> line:4:11 class AstClass definition
|   |-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor exists non_trivial user_provided
|   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor
|   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment
|   | `-Destructor non_trivial user_declared
|   |-CXXRecordDecl 0x55586603e7e8 <col:5, col:11> col:11 implicit referenced class AstClass
|   |-AccessSpecDecl 0x55586603e878 <line:5:5, col:12> col:5 private
|   |-FieldDecl 0x55586603e8b8 <line:6:9, col:15> col:15 referenced name 'char *'
|   |-FieldDecl 0x55586603e920 <line:7:9, col:27> col:13 referenced cislo_field 'int'
|   | `-IntegerLiteral 0x55586603f2e8 <col:27> 'int' 20
|   |-AccessSpecDecl 0x55586603e970 <line:8:5, col:11> col:5 public
|   |-CXXConstructorDecl 0x55586603ea40 <line:9:9, line:11:9> line:9:9 AstClass 'void ()' implicit-inline
|   | |-CXXCtorInitializer Field 0x55586603e920 'cislo_field' 'int'
|   | | `-CXXDefaultInitExpr 0x55586603f308 <col:9> 'int'
|   | `-CompoundStmt 0x55586605d4a0 <col:20, line:11:9>
|   |   `-BinaryOperator 0x55586605d480 <line:10:13, col:38> 'char *' lvalue '='
|   |     |-MemberExpr 0x55586603f368 <col:13, col:19> 'char *' lvalue ->name 0x55586603e8b8
|   |     | `-CXXThisExpr 0x55586603f358 <col:13> 'jojoNamespace::AstClass *' this
|   |     `-CXXNewExpr 0x55586605d440 <col:26, col:38> 'char *' array Function 0x55586605c870 'operator new[]' 'void *(unsigned long)'
|   |       `-ImplicitCastExpr 0x55586603f3c8 <col:35> 'unsigned long' <IntegralCast>
|   |         `-IntegerLiteral 0x55586603f398 <col:35> 'int' 100
|   |-CXXMethodDecl 0x55586603ec68 <line:12:9, line:14:9> line:12:13 spocitaj 'int (int, int)' implicit-inline
|   | |-ParmVarDecl 0x55586603eb08 <col:22, col:26> col:26 used a 'int'
|   | |-ParmVarDecl 0x55586603eb88 <col:29, col:33> col:33 used b 'int'
|   | `-CompoundStmt 0x55586605d558 <col:36, line:14:9>
|   |   `-ReturnStmt 0x55586605d548 <line:13:13, col:24>
|   |     `-BinaryOperator 0x55586605d528 <col:20, col:24> 'int' '+'
|   |       |-ImplicitCastExpr 0x55586605d4f8 <col:20> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x55586605d4b8 <col:20> 'int' lvalue ParmVar 0x55586603eb08 'a' 'int'
|   |       `-ImplicitCastExpr 0x55586605d510 <col:24> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x55586605d4d8 <col:24> 'int' lvalue ParmVar 0x55586603eb88 'b' 'int'
|   |-CXXMethodDecl 0x55586603ed78 <line:15:9, line:17:9> line:15:13 getCislo 'int ()' implicit-inline
|   | `-CompoundStmt 0x55586605d5d8 <col:24, line:17:9>
|   |   `-ReturnStmt 0x55586605d5c8 <line:16:13, col:20>
|   |     `-ImplicitCastExpr 0x55586605d5b0 <col:20> 'int' <LValueToRValue>
|   |       `-MemberExpr 0x55586605d580 <col:20> 'int' lvalue ->cislo_field 0x55586603e920
|   |         `-CXXThisExpr 0x55586605d570 <col:20> 'jojoNamespace::AstClass *' implicit this
|   |-CXXMethodDecl 0x55586603ee78 <line:18:9, line:20:9> line:18:21 getName 'const char *()' implicit-inline
|   | `-CompoundStmt 0x55586605d6b8 <col:31, line:20:9>
|   |   `-ReturnStmt 0x55586605d6a8 <line:19:13, col:20>
|   |     `-ImplicitCastExpr 0x55586605d690 <col:20> 'const char *' <ArrayToPointerDecay>
|   |       `-StringLiteral 0x55586605d670 <col:20> 'const char[6]' lvalue "Jozef"
|   |-CXXMethodDecl 0x55586603f000 <line:21:9, line:23:9> line:21:14 setName 'void (char *)' implicit-inline
|   | |-ParmVarDecl 0x55586603ef38 <col:22, col:28> col:28 used name 'char *'
|   | `-CompoundStmt 0x55586605d768 <col:34, line:23:9>
|   |   `-BinaryOperator 0x55586605d748 <line:22:13, col:26> 'char *' lvalue '='
|   |     |-MemberExpr 0x55586605d6e0 <col:13, col:19> 'char *' lvalue ->name 0x55586603e8b8
|   |     | `-CXXThisExpr 0x55586605d6d0 <col:13> 'jojoNamespace::AstClass *' this
|   |     `-ImplicitCastExpr 0x55586605d730 <col:26> 'char *' <LValueToRValue>
|   |       `-DeclRefExpr 0x55586605d710 <col:26> 'char *' lvalue ParmVar 0x55586603ef38 'name' 'char *'
|   |-CXXMethodDecl 0x55586603f0d0 <line:24:9, line:29:9> line:24:14 loop 'void ()' implicit-inline
|   | `-CompoundStmt 0x55586605da28 <col:21, line:29:9>
|   |   |-DeclStmt 0x55586605d820 <line:25:13, col:22>
|   |   | `-VarDecl 0x55586605d798 <col:13, col:21> col:17 used a 'int' cinit
|   |   |   `-IntegerLiteral 0x55586605d800 <col:21> 'int' 0
|   |   `-ForStmt 0x55586605d9f0 <line:26:13, line:28:13>
|   |     |-DeclStmt 0x55586605d8d8 <line:26:18, col:27>
|   |     | `-VarDecl 0x55586605d850 <col:18, col:26> col:22 used i 'int' cinit
|   |     |   `-IntegerLiteral 0x55586605d8b8 <col:26> 'int' 0
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x55586605d948 <col:29, col:33> 'bool' '<'
|   |     | |-ImplicitCastExpr 0x55586605d930 <col:29> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x55586605d8f0 <col:29> 'int' lvalue Var 0x55586605d850 'i' 'int'
|   |     | `-IntegerLiteral 0x55586605d910 <col:33> 'int' 10
|   |     |-UnaryOperator 0x55586605d988 <col:37, col:38> 'int' postfix '++'
|   |     | `-DeclRefExpr 0x55586605d968 <col:37> 'int' lvalue Var 0x55586605d850 'i' 'int'
|   |     `-CompoundStmt 0x55586605d9d8 <col:42, line:28:13>
|   |       `-UnaryOperator 0x55586605d9c0 <line:27:17, col:18> 'int' postfix '++'
|   |         `-DeclRefExpr 0x55586605d9a0 <col:17> 'int' lvalue Var 0x55586605d798 'a' 'int'
|   `-CXXDestructorDecl 0x55586603f1f8 <line:30:9, line:32:9> line:30:9 ~AstClass 'void () noexcept' implicit-inline
|     `-CompoundStmt 0x55586605daf8 <col:21, line:32:9>
|       `-CXXDeleteExpr 0x55586605dad8 <line:31:13, col:20> 'void' Function 0x55586605cce8 'operator delete' 'void (void *) noexcept'
|         `-ImplicitCastExpr 0x55586605dac0 <col:20> 'char *' <LValueToRValue>
|           `-MemberExpr 0x55586605da90 <col:20> 'char *' lvalue ->name 0x55586603e8b8
|             `-CXXThisExpr 0x55586605da80 <col:20> 'jojoNamespace::AstClass *' implicit this
|-NamespaceDecl 0x55586603f3e0 <<invalid sloc>> <invalid sloc> implicit std
|-FunctionDecl 0x55586605c3f0 <<invalid sloc>> <invalid sloc> implicit operator new 'void *(unsigned long)'
| |-ParmVarDecl 0x55586605c4f0 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| |-VisibilityAttr 0x55586605c498 <<invalid sloc>> Implicit Default
| |-ReturnsNonNullAttr 0x55586605c560 <<invalid sloc>> Implicit
| `-AllocSizeAttr 0x55586605c588 <<invalid sloc>> Implicit 1
|-FunctionDecl 0x55586605c600 <<invalid sloc>> <invalid sloc> implicit operator new 'void *(unsigned long, std::align_val_t)'
| |-ParmVarDecl 0x55586605c700 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| |-ParmVarDecl 0x55586605c768 <<invalid sloc>> <invalid sloc> implicit 'std::align_val_t'
| |-VisibilityAttr 0x55586605c6a8 <<invalid sloc>> Implicit Default
| |-ReturnsNonNullAttr 0x55586605c7e0 <<invalid sloc>> Implicit
| |-AllocSizeAttr 0x55586605c808 <<invalid sloc>> Implicit 1
| `-AllocAlignAttr 0x55586605c838 <<invalid sloc>> Implicit 2
|-FunctionDecl 0x55586605c870 <<invalid sloc>> <invalid sloc> implicit used operator new[] 'void *(unsigned long)'
| |-ParmVarDecl 0x55586605c970 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| |-VisibilityAttr 0x55586605c918 <<invalid sloc>> Implicit Default
| |-ReturnsNonNullAttr 0x55586605c9e0 <<invalid sloc>> Implicit
| `-AllocSizeAttr 0x55586605ca08 <<invalid sloc>> Implicit 1
|-FunctionDecl 0x55586605ca38 <<invalid sloc>> <invalid sloc> implicit operator new[] 'void *(unsigned long, std::align_val_t)'
| |-ParmVarDecl 0x55586605cb38 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| |-ParmVarDecl 0x55586605cba0 <<invalid sloc>> <invalid sloc> implicit 'std::align_val_t'
| |-VisibilityAttr 0x55586605cae0 <<invalid sloc>> Implicit Default
| |-ReturnsNonNullAttr 0x55586605cc18 <<invalid sloc>> Implicit
| |-AllocSizeAttr 0x55586605cc40 <<invalid sloc>> Implicit 1
| `-AllocAlignAttr 0x55586605cc70 <<invalid sloc>> Implicit 2
|-FunctionDecl 0x55586605cce8 <<invalid sloc>> <invalid sloc> implicit used operator delete 'void (void *) noexcept'
| |-ParmVarDecl 0x55586605cde8 <<invalid sloc>> <invalid sloc> implicit 'void *'
| `-VisibilityAttr 0x55586605cd90 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x55586605cea0 <<invalid sloc>> <invalid sloc> implicit operator delete 'void (void *, std::align_val_t) noexcept'
| |-ParmVarDecl 0x55586605cfa0 <<invalid sloc>> <invalid sloc> implicit 'void *'
| |-ParmVarDecl 0x55586605d008 <<invalid sloc>> <invalid sloc> implicit 'std::align_val_t'
| `-VisibilityAttr 0x55586605cf48 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x55586605d090 <<invalid sloc>> <invalid sloc> implicit operator delete[] 'void (void *) noexcept'
| |-ParmVarDecl 0x55586605d190 <<invalid sloc>> <invalid sloc> implicit 'void *'
| `-VisibilityAttr 0x55586605d138 <<invalid sloc>> Implicit Default
`-FunctionDecl 0x55586605d200 <<invalid sloc>> <invalid sloc> implicit operator delete[] 'void (void *, std::align_val_t) noexcept'
  |-ParmVarDecl 0x55586605d300 <<invalid sloc>> <invalid sloc> implicit 'void *'
  |-ParmVarDecl 0x55586605d368 <<invalid sloc>> <invalid sloc> implicit 'std::align_val_t'
  `-VisibilityAttr 0x55586605d2a8 <<invalid sloc>> Implicit Default